事件
阻止事件冒泡：
    1.ev.cancelBubble = true;
    2.@click.stop (推荐)

阻止默认行为
    ev.preventDefault();

右键点击事件
    @contextmenu
    @contextmenu.prevent    // 阻止默认行为  (推荐)

键盘事件
    @keydown
    @keyup
    @keyup/keydown.enter    // 回车键
    @keyup/keydown.up       // 上键
    @keyup/keydown.down     // 下键
    @keyup/keydown.left     // 左键
    @keyup/keydown.right    // 右键
    @keyup/keydown.delete   // 删除键
    @keyup/keydown.esc      // esc键

属性
    v-bind   简写只要":"
class/style
    :class/:style="[color]"      // color是data数据里的变量
    :class/:style={color:true}   // color是样式表里的class

计算属性
    computed:{
    	b: function(){     // b是属性 默认调用get
            retuen 值;
        }
    }
    --------------------
    computed:{
    	b: {
            get: function(){
                return 值;
            }
            set: function(val){
                return 值;
            }
        }
    }
    *computed里面可以放置一些业务逻辑代码，一定记得return

模板
    {{msg}}    // 数据更新模板变化         =>   v-text
    {{{msg}}}  // HTML转义输出（vue1.0）   =>   v-html
    {{*msg}}   // 数据只绑定一次（vue1.0）

过滤器 -> 过滤模板数据 (model -> 过滤 -> view)
    系统提供的过滤器（vue1.0）:
    {{'abc' | uppercase}}           // 转大写
    {{'ABC' | lowercase}}           // 转小写
    {{'ABC' | capitalize}}          // 首字母大写
    {{JSON | json}}                 // 直接显示接送数据
    {{123 | currency}}              // 钱的符号$  
    {{123 | currency '￥'}}         // 钱的符号￥（传参）  
    {{'abc' | filterA | filterB}}   // 多个过滤器
    {{'abc' | filterA  参数}}       // 过滤器传参

    事件配合使用:
    debounce     //延迟执行 "function | debounce 2000"

    数据配合使用：
    limitBy      //限制几个  v-for="value in data | limitBy 取几个值 从第几个开始"
    filterBy     //过滤数据，获取包含参数的数据  v-for="value in data | filterBy 参数'"

    排序：
    orderBy        
    orderBy 谁     //排序
    orderBy 1      //正序排序
    orderBy -1     //倒序排序
    orderBy a      //结合写法 文本框输入1会正序排序，输入-1会倒序排序

    自定义过滤器
    Vue.filter('过滤器名称', function(value, 参数1，参数2，…){
        retuen 值;
    });
    
    双向过滤器：
    Vue.filter('过滤器名称', {
        read: function(){   //model -> view
            return 值;
        },
        write: function(){  //view -> model
            return 值;
        }
    });

自定义属性指令
    Vue.directive('指令名'， function(参数){});
    *指令名不能有v-开头，但是使用的时候必须有v-

自定元素性指令(用处不大)
    Vue.elementDirective('指令名', {
        bind: function(){}
    })

自定义键盘
    Vue.directive('on').keyCodes.自定义键名 = 键盘code;

生命周期(vue1.0)
    created        //实例已经创建
    beforCompile   //编译之前
    compiled       //编译之前
    ready          //插入到文档中了
    beforDestroy   //销毁之前
    destroyed      //销毁之后


交互
    请求一个普通文本数据：
    this.$http.get('a.text').then(function(res){
        console.log(res.data);
    });

    get：
    this.$http.get('a.php', {
        a: 1,
        b: 2
    }).then(function(res){
        console.log(res.data);
    });

    post：
    this.$http.post('url', {
        a: 1,
        b: 2
    },{
        emulateJson: true
    }).then(function(res){
        
    });

    jsonp：  //(resource v0.*)
    this.$http.jsonp('url', {
        a: 1,
        b: 2
    },{
        jsonp: ''  //callback名字，默认名字就是callback
    }).then(function(res){
        
    });
    
    另一种写法：
    this.$http({
        url: 'url',
        data: {
            wd:''
        },
        method: 'jsonp/get/post',
        jsonp: 'cb'
    }).then(function(res){
        
    },function(res){
        
    });

防止模板闪烁（数据解析之前显示花括号）
    标签内添加属性： v-cloak
    样式表添加：[v-cloak]{display:none;}

vue实例的一些简单方法
    vm.$el                 //获取到元素
    vm.$data               //就是data
    vm.$mount              //手动挂载
    vm.$option.属性        //获取自定义属性
    vm.$log                //查看现在数据的状态
    vm.$destroy            //销毁对象

监听数据变化
    vm.$watch(name, function(){});               //浅度监视
    vm.$watch(name, function(){}，{deep:true});  //深度监视

循环
    v-for="value in data"
    如果有重复数据：track-by="索引/数据id"   //提高循环性能

vue过渡(动画)
    本质走的css3:transtion,anumation
    <div id="" v-show="" transition="自定义名"></div>
    
    .自定义名-transition{
        transition: 1s all ease;
    }
    .自定义名-enter{    //进入
        opacity: 0;
    }
    .自定义名-leave{    //离开
        opacity: 0;
    }

    new Vue({
        el: "#box",
        data: {
            dod: true,
        },
        methods:{
            tod(){
                this.dod = !this.dod;
            }
        }
    });
    -----------------------------------------------
    <link rel="stylesheet" href="animate.css">
    <div id="" class="animated" v-show="" transition="自定义名"></div>
    
    new Vue({
        el: "#box",
        data: {
            dod: true,
        },
        methods:{
            tod(){
                this.dod = !this.dod;
            }
        },
        transitions:{    //定义所有动画名称
            自定义名:{
                enterClass: "zoomInLeft",
                leaveClass: "zoomOutRight"
            }
        }
    });

vue组件
    组件：一个大的对象

    定义一个组件：
    1.全局组件 
    <aaa></aaa>
    var Aaa = Vue.extend({
        data(){    //data必须是函数形式，函数必须返回一个对象
            return{
                
            }
        },
        methods:{
        },
        template: html;
    });
    Vue.component('aaa', Aaa);
    -----------------------------
    Vue.component('aaa', {
        template: html
    });

    2.局部组件:放到某个组件内部
    <aaa></aaa>
    var Aaa = Vue.extend({
        template: html;
        data(){    //data必须是函数形式，函数必须返回一个对象
            return{
                
            }
        },
    });
    new Vue({
        el: "#box",
        data: {
        },
        methods:{
        },
        components:{
            'aaa': Aaa
        }
    });
    ---------------------------
    new Vue({
        el: "#box",
        data: {
        },
        methods:{
        },
        components:{
            data(){
                return{
                    
                }
            },
            methods:{
            },
            'aaa': {
                 template: html
             }
        }
    });
    -------------------------
    配合模板：
    a)
    <script type="x-template" id="aaa">
        html
    </script>
    ---------------
    b)
    <template id="aaa">
        html
    </template>

    new Vue({
        el: "#box",
        data: {
        },
        methods:{
        },
        components:{
            data(){
                return{
                    
                }
            },
            methods:{
            },
            'aaa': {
                 template: '#aaa'
             }
        }
    });

动态组件
    <componenr :is="自定义名"></component>
    new Vue({
        el: "#box",
        data: {
           自定义名: '组件名' 
        },
        methods:{
        },
        components:{
             '组件1': {
                 template: 'html'
             }，
             '组件2': {
                 template: 'html'
             }
        }
    });
    

父子组件:vue默认情况下，子组件不能访问父组件数据
    components:{
        '父组件': {
            template: 'html…子组件'，
            components: {
                子组件: {
                    template: 'html'
                }
            }
        }
    }

子组件获取父组件的值
    <div id="box">
        <aaa></aaa>
    </div>

    <template id="mb">
        <h3>模板内容</h3>
        <bbb :m="fu" :m-m2="fu2"></bbb>
    </template>

    new Vue({
        el: "#box",
        components: {
            'aaa': {
                data(){
                    return {
                        fu: 'woshi fuj'，
                        fu2: 'woshi fuj'
                    }
                },
                template: '#mb',
                components: {
                    'bbb': {
                        props: ['m', 'mM2'],  // m-m2 -> mM2
                        -------------------
                        props: {
                            'm': 数据类型
                            'm2': 数据类型
                        }, 
                        template: '<b>孙{{m}}</b>'
                    }
                }
            }
        }
    });

父组件获取子组件的值（子组件把自己的数据发送给父组件）
    <div id="box">
        <aaa></aaa>
    </div>

    <template id="mb">
        <span>我是父级->{{msg}}</span><br/>

        <bbb @haha="gets"></bbb>
    </template>

    <template id="mb2">
        <span>我是zi级</span><br/>
        <input type="button" value="aa" @click="send">
    </template>
	
    new Vue({
        el: "#box",
        components: {
            'aaa': {
            data(){
                return {
                fu: 'woshi fuj',
                    msg: ''
                }
            },
            methods:{
                gets(msg){
                    this.msg = msg;
                    }
                },
                template: '#mb',
                components: {
                    'bbb': {
                        template: '#mb2',
                        data(){
                            return {
                                zi: 'zi'
                            }
                        },
                        methods: {
                            send(){
                                this.$emit('haha', this.zi); //$emit想歪发送数据
                            }
                        }
                    }
                }
            }
        }
    });
    ------------------------------------------------
    vm.dispath(事件名, 数据)    子级向父级发送数据
    vm.broadcast(事件名, 数据)  父级向子级广播数据
    配合 event:{}
    *vue2.0已废除

slot  //占位
    <aaa>
        <ul slot="ul-list">
            <li></li>
        </ul>
        
        <ol slot="ol-list">
            <li></li>
        </ol>
    </aaa>
    <template id="mb">
        <span>我是父级->{{msg}}</span>
        <slot name="ul-list">这是默认</slot>
        <slot name="ol-list">这是默认</slot>
    </template>





























































