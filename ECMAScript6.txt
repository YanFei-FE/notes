let
    用来声明一个变量，和var非常类似。
    所声明的变量只在所在的代码块有效。
    声明的变量在域解析的时候不会被提升。
    不允许在同一个作用域下声明已经存在的变量。

const
    用来声明一个常量，常亮就是不可以变化的量
    所声明的常量只在所在的代码块有效。
    声明的常量在域解析的时候不会被提升。
    不允许在同一个作用域下声明已经存在的变量。
    声明的时候必须赋值。
    声明的常量存储简单的数据类型时候不可改变其值，如果存储的是对象，那么引用不可以被改变，至于对象里的数据如何变化，是没有关系的

解构赋值
    本质上是一种匹配模式，只要等号两边的模式相同，那么左边的变量就可以被赋予对应的值。
    解构赋值主要分为：
        1.数组的解构赋值
            let [a, [b], c] = [1, [2], 3];
            console.log(a, b, c);  //1, 2, 3
 let [ , , c] = [1, 2, 3]; console.log(c);  //3

            let [x] = [];    //相当于let x;
            console.log(x);  //undefined

            let [y = 1] = [];
            console.log(y);  //1

        2.对象的解构赋值
            let {a, b} = {b: 'bbb', a: 'aaa'};
            console.log(a, b);//aaa bbb

            let {a: b} = {a: 1};
            console.log(b);   //1
            console.log(a);   //a is not defined

        3.基本类型的解构赋值
            let [a, b, c] = '123';
            console.log(a, b, c);  // 1 2 3

            let {length: len} = 'yan';
            console.log(len);  // 3

            let {toString: ts} = 1;
            let {toString: bs} = true;
            console.log(ts);  // function toString()  ts===Number.prototype.toString
            console.log(bs);  // function toString()  bs===Boolean.prototype.toString

            null 和 undegined 不能进行解构赋值

数据结构set
    集合的基本概念：集合是由一组无序且唯一（即不能重复）的项目组成的。这个数据结构使用了有限集合相同的数学概念，应用在计算机的数据结构中。
    特点：key 和 value 相同，没有重复的 value。
    ES6提供了数据结构的Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。

    1.创建Set
        const s = new Set([1, 2, 3]);
        console.log(s); // Set { 1, 2, 3 }

    2.Set 类的属性
        console.log(s.size) // 3

    3.Set 类的方法
        ·set.add(value) 添加一个数据，返回Set结构本身
            s.add('a').add('b');
            console.log(s);  //1 2 3 a b

        ·set.delete(value) 删除一个指定数据，返回布尔值，表示删除是否成功。
        ·set.has(value) 判断该值是否为set的成员，返回一个布尔值
        ·set.clear() 清除所有数据，没有返回值
        ·keys() 返回键名的遍历器
        ·values() 返回键值的遍历器
        ·entries() 返回键值对的遍历器 
        ·forEach() 使 用回调函数遍历每个成员
            s.forEach(function(value, key, set){});

数据结构map
    字典：是用来存储不重复key的Hash结构。不同于集合（Set）的是，字典使用的是[键, 值]的形式来存储数据结构。

    javascript的对象（Object:{}）只能用字符串当作键。这给它的使用带来了很大的限制。
    为了解决这个问题，ES6提供了Map数据结构。它类似于对象，页是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。
    也就是说，Object结构提供了“字符串-值”的对应，Map结构提供了“值-值”的对应，是一种更完善的Hash结构实现。
    如果你需要“键值对”的数据结构，Map逼Object更合适。

    1.创建一个Map
        const map = new Map([
            ['a', 1],
            ['b', 2]
        ]);
        console.log(map); //Map { 'a' => 1, 'b' => 2 }

    2.Map的属性
        map.size; // 2

    3.Map类的方法
        ·set(key, value)设置键名key对应的键值为value，然后返回整个Map结构。
         如果key已经有值，则键值会被更新，否则就新生成该键值。
            map.set('c', 2).set('d', '呵呵');

        ·get(key) get方法读取key对应的键值，如果找不到key，返回undefined。
            map.get('b');

        ·delete(key)删除某个键，返回true。如果删除失败，返回false。
            map.delete('b');

        ·has(key) 方法返回一个布尔值，表示是否存在当前Map中。
        ·clear() 清楚所有数据，没有返回值。
        ·keys() 返回键名的遍历器
        ·values() 返回键值的遍历器
        ·entries() 返回键值对的遍历器
        ·forEach() 使用回调函数遍历每个键值对
            map.forEach(functiion(key, value, map){});
    
    4.Map在使用过程中一些注意事项
        const map = new Map();
        map.set({}, 'x').set({}, 'y');  // Map { {} => 'x', {} => 'y' }

        map.set(NaN, 10).set(NaN, 100); // Map { NaN => 100 }

iterator和for…of循环
    基本概念：
        在ES6中新增了Set和Map两种数据结构，再加上JS之前原有的数组和对象，这样就有了四种数据集合，
        平时还可以组合使用它们，定义自己的数据结构，比如数组的成员是Map，Map的成员是对象等，
        这样就需要一种统一的接口机制，来处理所有不同的数据结构。

        Iterator就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。
        任何数据结构只要部署Iterator接口，就可以完成遍历操作，
        而且这种遍历操作是**依次**处理该数据结构所有成员。

    Iterator遍历器的作用：
        ·为各种数据结构，提供一个统一的。简便的访问接口。
        ·使得数据结构的成员能够按某种次序排列。
        ·ES6新增了遍历命令for…of循环，Iterator接口主要提供for…of消费

            var arr = [1, 2, 3];
            function iterator(arr){
                let index = 0;
                return {
                    next : function(){
                        return index < arr.length ?
                               {value: arr[index++], done: false} :
                               {value: undefined, done: true};
                    }
                }
            }

            const it = iterator(arr);

            console.log(it.next());
            console.log(it.next());
            console.log(it.next());
            console.log(it.next());

    Iterator的遍历过程：
        ·创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。
        ·第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。
        ·第二次调用指针对象的next方法，可以将指针指向数据结构的第二个成员。
        ·不断调用指针对象的next方法，直到它指向数据结构的结束位置。

        ·每次调用next方法，都会返回数据结构的当前成员的信息，具体来说，就是返回一个包含value和done两个属性的对象。其中，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束。

    凡是具有Symbol.iterator属性的数据结构都具有Itrtator接口
        const arr = [1, 2, 3];
        const set = new Set(['a', 'b', 'c']);
        const map = new Map([['a', 1]]);

        const itarr = arr[Symbol.iterator]();
        const itset = set[Symbol.iterator]();
        const itmap = map[Symbol.iterator]();

        console.log(itarr); // Array Iterator {}
        console.log(itset); // SetIterator {"a", "b", "c"}
        console.log(itmap); // MapIterator {"a" => 1}

        console.log(itarr.next()); // Object {value: 1, done: false}
        console.log(itarr.next()); // Object {value: 2, done: false}
        console.log(itarr.next()); // Object {value: 3, done: false}
        console.log(itarr.next()); // Object {value: undefined, done: true}

