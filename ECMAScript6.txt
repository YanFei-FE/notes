let
    用来声明一个变量，和var非常类似。
    所声明的变量只在所在的代码块有效。
    声明的变量在域解析的时候不会被提升。
    不允许在同一个作用域下声明已经存在的变量。

const
    用来声明一个常量，常亮就是不可以变化的量
    所声明的常量只在所在的代码块有效。
    声明的常量在域解析的时候不会被提升。
    不允许在同一个作用域下声明已经存在的变量。
    声明的时候必须赋值。
    声明的常量存储简单的数据类型时候不可改变其值，如果存储的是对象，那么引用不可以被改变，至于对象里的数据如何变化，是没有关系的

解构赋值
    本质上是一种匹配模式，只要等号两边的模式相同，那么左边的变量就可以被赋予对应的值。
    解构赋值主要分为：
        1.数组的解构赋值
            let [a, [b], c] = [1, [2], 3];
            console.log(a, b, c);  //1, 2, 3

            let [ , , c] = [1, 2, 3];
            console.log(c);  //3

            let [x] = [];    //相当于let x;
            console.log(x);  //undefined

            let [y = 1] = [];
            console.log(y);  //1

        2.对象的解构赋值
            let {a, b} = {b: 'bbb', a: 'aaa'};
            console.log(a, b);//aaa bbb

            let {a: b} = {a: 1};
            console.log(b);   //1
            console.log(a);   //a is not defined
